name: Code CI

on:
  push:
    branches:
      - main
    tags:
      - "*"
  pull_request:

jobs:
  exhausive_lock:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependancies with constraints
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev,docs] -c requirements.txt

      - name: Check requirements.txt constrains all
        run: diff requirements.txt <(pip freeze | grep -vE "^-e")

  lint:
    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependancies
        run: |
          python -m pip install --upgrade pip
          pip install .[dev] -r requirements.txt

      - name: Run black, flake8, mypy
        run: |
          pre-commit run --all-files --show-diff-on-failure --color=always -v

  test_core:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python: ["3.9", "3.10"]
        deploy: [false]
        marker: ["core"]

        include:
          # Add an extra Python3.9 runner to use the lockfile
          - os: "ubuntu-latest"
            python: "3.9"
            deploy: true
            marker: "core"

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: ./.github/actions/do_tests
        with:
          prefix: ${{ matrix.os }}
          deploy: ${{ matrix.deploy }}
          marker: ${{ matrix.marker }}
          python: ${{ matrix.python }}

  test_compat:
    strategy:
      fail-fast: false
      matrix:
        os: ["ubuntu-latest"]
        python: ["3.9", "3.10"]
        deploy: [false]
        marker: ["numcertain", "pint"]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: ./.github/actions/do_tests
        with:
          prefix: ${{ matrix.os }}
          deploy: ${{ matrix.deploy }}
          marker: ${{ matrix.marker }}
          python: ${{ matrix.python }}

  sdist_wheel:
    needs: [exhausive_lock, lint, test_core]

    runs-on: "ubuntu-latest"
    steps:
      - name: Checkout Source
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Set fake version if untagged
        if: github.event_name != 'push' || !startsWith(github.ref, 'refs/tags')
        run: echo "SETUPTOOLS_SCM_PRETEND_VERSION=$(git describe --tags --abbrev=0).$(date +%s)" >> $GITHUB_ENV

      - name: Build Sdist
        # Set SOURCE_DATE_EPOCH from git commit for reproducible build
        # https://reproducible-builds.org/
        # Set group writable and umask to do the same to match inside DLS
        run: |
          chmod -R g+w .
          umask 0002
          SOURCE_DATE_EPOCH=$(git log -1 --pretty=%ct) pipx run --python $(which python${{ matrix.python }}) build --sdist --wheel

      - name: Upload Sdist as artifact
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/*

  test_pypi_publish:
    needs: [sdist_wheel]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Publish to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository_url: https://test.pypi.org/legacy/

  release:
    needs: [test_pypi_publish]
    runs-on: ubuntu-latest
    # upload to PyPI and make a release on every tag
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist

      - name: Github Release
        # We pin to the SHA, not the tag, for security reasons.
        # https://docs.github.com/en/actions/learn-github-actions/security-hardening-for-github-actions#using-third-party-actions
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5 # v0.1.14
        with:
          files: dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_TOKEN }}
